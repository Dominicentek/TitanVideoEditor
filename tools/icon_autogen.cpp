#include <fstream>
#include <filesystem>
#include <string>
#include <map>

void write_string(std::ofstream* stream, std::string data) {
    stream->write(data.data(), data.length());
}

int main() {
    std::map<std::string, std::string> syscursors = {
        { "move", "SIZEALL" },
        { "move_horizontal", "SIZEWE" },
        { "move_vertical", "SIZENS" }
    };

    std::ofstream cursors_c = std::ofstream(std::filesystem::path("src/gui/lib/cursors.cpp"));
    std::ofstream cursors_h = std::ofstream(std::filesystem::path("src/gui/lib/cursors.hpp"));
    std::ofstream icons_c = std::ofstream(std::filesystem::path("src/gui/lib/icons.cpp"));
    std::ofstream icons_h = std::ofstream(std::filesystem::path("src/gui/lib/icons.hpp"));

    write_string(&cursors_c, "#include \"utils.hpp\"\n");
    write_string(&cursors_c, "#include \"assets/assetdata.hpp\"\n");
    write_string(&cursors_c, "#include <SDL2/SDL.h>\n");
    write_string(&cursors_c, "\n");
    write_string(&cursors_c, "// This file is automatically generated by the build system\n");
    write_string(&cursors_c, "// Any changes to this file will be overwritten during build\n");
    write_string(&cursors_c, "\n");
    write_string(&cursors_c, "SDL_Cursor* cursor_default = nullptr;\n");

    write_string(&cursors_h, "#ifndef Cursors_H\n");
    write_string(&cursors_h, "#define Cursors_H\n");
    write_string(&cursors_h, "\n");
    write_string(&cursors_h, "#include <SDL2/SDL.h>\n");
    write_string(&cursors_h, "\n");
    write_string(&cursors_h, "// This file is automatically generated by the build system\n");
    write_string(&cursors_h, "// Any changes to this file will be overwritten during build\n");
    write_string(&cursors_h, "\n");
    write_string(&cursors_h, "extern SDL_Cursor* cursor_default;\n");

    for (const auto& syscursor : syscursors) {
        write_string(&cursors_c, "SDL_Cursor* cursor_" + syscursor.first + " = nullptr;\n");
        write_string(&cursors_h, "extern SDL_Cursor* cursor_" + syscursor.first + ";\n");
    }

    write_string(&icons_c, "#include \"utils.hpp\"\n");
    write_string(&icons_c, "#include \"assets/assetdata.hpp\"\n");
    write_string(&icons_c, "#include <SDL2/SDL.h>\n");
    write_string(&icons_c, "\n");
    write_string(&icons_c, "// This file is automatically generated by the build system\n");
    write_string(&icons_c, "// Any changes to this file will be overwritten during build\n");
    write_string(&icons_c, "\n");

    write_string(&icons_h, "#ifndef Icons_H\n");
    write_string(&icons_h, "#define Icons_H\n");
    write_string(&icons_h, "\n");
    write_string(&icons_h, "#include <SDL2/SDL.h>\n");
    write_string(&icons_h, "\n");
    write_string(&icons_h, "// This file is automatically generated by the build system\n");
    write_string(&icons_h, "// Any changes to this file will be overwritten during build\n");
    write_string(&icons_h, "\n");

    for (const auto& entry : std::filesystem::directory_iterator(std::filesystem::path("assets/images"))) {
        std::string name = entry.path().filename().string();
        name = name.substr(0, name.length() - 4);
        if (name.rfind("cursor_", 0) == 0) {
            write_string(&cursors_h, "extern SDL_Cursor* " + name + ";\n");
            write_string(&cursors_c, "SDL_Cursor* " + name + " = nullptr;\n");
        }
        else {
            write_string(&icons_h, "extern SDL_Texture* icon_" + name + ";\n");
            write_string(&icons_c, "SDL_Texture* icon_" + name + " = nullptr;\n");
        }
    }

    write_string(&cursors_h, "\n");
    write_string(&cursors_h, "extern void init_cursors();\n");
    write_string(&cursors_h, "\n");
    write_string(&cursors_h, "#endif\n");

    write_string(&cursors_c, "\n");
    write_string(&cursors_c, "void init_cursors() {\n");
    write_string(&cursors_c, "    cursor_default = SDL_GetDefaultCursor();\n");

    write_string(&icons_h, "\n");
    write_string(&icons_h, "extern void init_icons(SDL_Renderer* renderer);\n");
    write_string(&icons_h, "\n");
    write_string(&icons_h, "#endif\n");

    write_string(&icons_c, "\n");
    write_string(&icons_c, "void init_icons(SDL_Renderer* renderer) {\n");

    for (const auto& syscursor : syscursors) {
        write_string(&cursors_c, "    cursor_" + syscursor.first + " = SDL_CreateSystemCursor(SDL_SYSTEM_CURSOR_" + syscursor.second + ");\n");
    }

    for (const auto& entry : std::filesystem::directory_iterator(std::filesystem::path("assets/images"))) {
        std::string name = entry.path().filename().string();
        name = name.substr(0, name.length() - 4);
        if (name.rfind("cursor_", 0) == 0) {
            write_string(&cursors_c, "    " + name + " = SDL_CreateColorCursor(CreateSdlSurfaceFromPng(images_" + name + "_png), 8, 8);\n");
        }
        else {
            write_string(&icons_c, "    icon_" + name + " = create_texture(renderer, images_" + name + "_png);\n");
        }
    }

    write_string(&cursors_c, "}\n");
    write_string(&icons_c, "}\n");

    return 0;
}