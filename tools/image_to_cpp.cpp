#include <filesystem>
#include <fstream>

#include <iostream>

namespace fs = std::filesystem;

static void GenerateSource(std::ofstream& sourceFileStream, const fs::path& imageFilePath, const std::string& name)
{
	const auto size = fs::file_size(imageFilePath);

	auto buffer = new uint8_t[size];

	auto imageFileStream = std::ifstream(imageFilePath);

	imageFileStream.read(reinterpret_cast<char*>(buffer), size);

	imageFileStream.close();

	sourceFileStream << "unsigned char icon_" << name << "_data[] =\n{\n	";

	sourceFileStream << std::hex;

	for (uintmax_t i = 0; i < size; i++)
	{
		if (i != 0)
			sourceFileStream << ", ";
		sourceFileStream << "0x" << std::hex << (int)buffer[i];
	}

	sourceFileStream << "\n};\n";

	delete[] buffer;
}

int main(int argc, char* argv[])
{

	const auto inDir = fs::path(argc == 1 ? "images" : argv[1]);
	const auto outDir = fs::path(argc == 1 ? "src/gui/libs" : argv[2]);

	auto imagesHeaderStream = std::ofstream(outDir / "images.hpp");
	auto imagesSourceStream = std::ofstream(outDir / "images.cpp");

	imagesHeaderStream <<
		"#pragma once\n"
		"\n"
		"// This file is automatically generated by ImageToCpp during the build process.\n"
		"// Any modifications to this file will be overwritten during building\n"
		"\n";

	for (const auto& dirEntry : fs::directory_iterator(inDir))
	{
		const auto path = dirEntry.path();

		auto namePath = path.filename();
		namePath.replace_extension();
		const auto name = namePath.string();

		imagesHeaderStream <<
			"extern unsigned char icon_" << name << "_data[];\n"
			"extern unsigned char* icon_" << name << "_length;\n";

		GenerateSource(imagesSourceStream, path, name);
	}

	imagesHeaderStream.close();
	imagesSourceStream.close();

	return 0;
}
