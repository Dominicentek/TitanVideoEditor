import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.util.HashMap;

// exports png images into src/gui/lib/images.h

public class ImageToC {
    public static void main(String[] args) throws Exception {
        OutputStream images_h = new FileOutputStream("../src/gui/lib/images.h");
        OutputStream icons_h = new FileOutputStream("../src/gui/lib/icons.h");
        OutputStream icons_cpp = new FileOutputStream("../src/gui/lib/icons.cpp");
        OutputStream cursors_h = new FileOutputStream("../src/gui/lib/cursors.h");
        OutputStream cursors_cpp = new FileOutputStream("../src/gui/lib/cursors.cpp");
        String header = "\n\n// This file is automatically generated by ImageToC\n// Do not modify!\n\n";
        images_h.write(("#ifndef Images_H\n#define Images_H" + header).getBytes());
        icons_h.write(("#ifndef Icons_H\n#define Icons_H\n\n#include <SDL2/SDL.h>" + header).getBytes());
        cursors_h.write(("#ifndef Cursors_H\n#define Cursors_H\n\n#include <SDL2/SDL.h>" + header).getBytes());
        icons_cpp.write(("#include \"icons.h\"\n#include \"images.h\"" + header).getBytes());
        cursors_cpp.write(("#include \"cursors.h\"" + header).getBytes());
        HashMap<String, BufferedImage> images = new HashMap<>();
        HashMap<String, BufferedImage> cursors = new HashMap<>();
        HashMap<String, String> systemCursors = new HashMap<>();
        systemCursors.put("move", "SIZEALL");
        systemCursors.put("move_horizontal", "SIZEWE");
        systemCursors.put("move_vertical", "SIZENS");
        for (File file : new File(".").listFiles()) {
            if (!file.getName().endsWith(".png")) continue;
            if (file.getName().startsWith("cursor_")) cursors.put(getNameWithoutExtension(file).substring(7), ImageIO.read(file));
            else images.put(getNameWithoutExtension(file), ImageIO.read(file));
        }
        cursors_h.write("extern SDL_Cursor* cursor_default;\n".getBytes());
        cursors_cpp.write("SDL_Cursor* cursor_default = nullptr;\n".getBytes());
        for (String name : images.keySet()) {
            addImageData(images_h, "icon_" + name + "_data", images.get(name));
            icons_h.write(("extern SDL_Texture* icon_" + name + ";\n").getBytes());
            icons_cpp.write(("SDL_Texture* icon_" + name + " = nullptr;\n").getBytes());
        }
        for (String sysCur : systemCursors.keySet()) {
            cursors_h.write(("extern SDL_Cursor* cursor_" + sysCur + ";\n").getBytes());
            cursors_cpp.write(("SDL_Cursor* cursor_" + sysCur + " = nullptr;\n").getBytes());
        }
        for (String name : cursors.keySet()) {
            cursors_h.write(("extern SDL_Cursor* cursor_" + name + ";\n").getBytes());
            cursors_cpp.write(("SDL_Cursor* cursor_" + name + " = nullptr;\n").getBytes());
        }
        icons_cpp.write("\nSDL_Texture* create_texture(SDL_Renderer* renderer, unsigned int* data, int width, int height) {\n    SDL_Surface* surface = SDL_CreateRGBSurfaceFrom(data, width, height, 32, width * 4, 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000);\n    return SDL_CreateTextureFromSurface(renderer, surface);\n}\n\nvoid init_icons(SDL_Renderer* renderer) {\n".getBytes());
        cursors_cpp.write("\nvoid init_cursors() {\n    cursor_default = SDL_GetDefaultCursor();\n".getBytes());
        for (String name : images.keySet()) {
            BufferedImage img = images.get(name);
            icons_cpp.write(("   icon_" + name + " = create_texture(renderer, icon_" + name + "_data, " + img.getWidth() + ", " + img.getHeight() + ");\n").getBytes());
        }
        for (String sysCur : systemCursors.keySet()) {
            cursors_cpp.write(("    cursor_" + sysCur + " = SDL_CreateSystemCursor(SDL_SYSTEM_CURSOR_" + systemCursors.get(sysCur) + ");\n").getBytes());
        }
        for (String cursor : cursors.keySet()) {
            BufferedImage img = cursors.get(cursor);
            addImageData(images_h, "cursor_" + cursor + "_data", img);
            // todo
        }
        images_h.write("#endif".getBytes());
        icons_h.write("\nextern void init_icons(SDL_Renderer* renderer);\n\n#endif".getBytes());
        cursors_h.write("\nextern void init_cursors();\n\n#endif".getBytes());
        icons_cpp.write("}".getBytes());
        cursors_cpp.write("}".getBytes());
        images_h.close();
    }
    public static String getNameWithoutExtension(File file) {
        String name = file.getName();
        if (!name.contains(".")) return name;
        int lastIndex = name.lastIndexOf(".");
        return name.substring(0, lastIndex);
    }
    public static void addImageData(OutputStream out, String varname, BufferedImage image) throws Exception {
        out.write(("inline unsigned int " + varname + "[] = {").getBytes());
        for (int y = 0; y < image.getHeight(); y++) {
            for (int x = 0; x < image.getWidth(); x++) {
                int i = y * image.getWidth() + x;
                if (i % 8 == 0) out.write("\n    ".getBytes());
                out.write(("0x" + String.format("%1$8s", Integer.toHexString(image.getRGB(x, y)).toUpperCase()).replaceAll(" ", "0") + ",").getBytes());
            }
        }
        out.write(("\n};\n\n").getBytes());
    }
}